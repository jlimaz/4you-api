const venom = require('venom-bot');
const axios = require('axios');
require('dotenv').config();

const userLastMessage = {};
const userMessageHistory = {};
const CONVERSATION_TIMEOUT = 30 * 60 * 1000;
const HISTORY_LIMIT = 10;

venom
  .create(
    'session-4you',
    undefined,
    undefined,
    {
      headless: true
    }
  )
  .then((client) => {
    console.log('Venom client created');
    start(client);
  })
  .catch((error) => {
    console.error('Venom error:', error);
  });

function start(client) {
  console.log('Client is ready!');

  client.onMessage(async (message) => {
    if (message.body && message.isGroupMsg === false) {
      try {
        const now = Date.now();
        const lastTime = userLastMessage[message.from] || 0;
        userLastMessage[message.from] = now;

        if (now - lastTime > CONVERSATION_TIMEOUT) {
          userMessageHistory[message.from] = [];
          const menuText =
            'üå∑ Ol√°! Eu sou sua assistente virtual de apoio √† mulher.\n\n' +
            'Estou aqui para te ouvir e te ajudar, com respeito, sigilo e carinho. üíú\n\n' +
            'Como posso te apoiar hoje?\n\n' +
            '1Ô∏è‚É£ Preciso de ajuda agora\n' +
            '2Ô∏è‚É£ Quero entender meus direitos e op√ß√µes\n' +
            '3Ô∏è‚É£ Falar com a rede de apoio\n\n' +
            'üì© Responda com o n√∫mero da op√ß√£o desejada. Estou com voc√™!';

          await client.sendText(message.from, menuText);
          return;
        }

        if (!userMessageHistory[message.from]) {
          userMessageHistory[message.from] = [];
        }

        if (['1', '2', '3'].includes(message.body.trim())) {
          let reply = '';
          switch (message.body.trim()) {
            case '1':
              reply = 'Entendo. Estou aqui com voc√™. üíú Por favor, me diga com o que voc√™ precisa de ajuda neste momento. Tudo o que disser ser√° tratado com cuidado e respeito.';
              break;
            case '2':
              reply = 'Claro! Posso te informar sobre os sinais de risco, seus direitos e como acessar a rede de prote√ß√£o. Me diga sobre o que voc√™ gostaria de saber.';
              break;
            case '3':
              reply = 'Tudo bem. Vou te conectar com a rede de apoio dispon√≠vel no Distrito Federal. Voc√™ prefere saber os locais pr√≥ximos a voc√™ ou falar com algu√©m agora?';
              break;
          }
          userMessageHistory[message.from].push({ role: 'user', content: message.body });
          userMessageHistory[message.from].push({ role: 'assistant', content: reply });
          userMessageHistory[message.from] = userMessageHistory[message.from].slice(-HISTORY_LIMIT);
          await client.sendText(message.from, reply);
          return;
        }


        userMessageHistory[message.from].push({ role: 'user', content: message.body });
        userMessageHistory[message.from] = userMessageHistory[message.from].slice(-HISTORY_LIMIT);

        const systemPrompt = "Voc√™ √© um assistente virtual no WhatsApp criado para apoiar a preven√ß√£o √† viol√™ncia contra a mulher no Distrito Federal. Sua miss√£o √© acolher, orientar e informar mulheres em situa√ß√£o de vulnerabilidade de forma segura, respeitosa e confidencial.\n\n" +
          "Suas responsabilidades:\n" +
          "Ajudar na identifica√ß√£o precoce de situa√ß√µes de risco, com base no Formul√°rio Nacional de Avalia√ß√£o de Risco (CNJ/CNMP n. 05/2020).\n\n" +
          "Oferecer suporte emocional e informativo, utilizando uma linguagem clara, emp√°tica e sem julgamentos.\n\n" +
          "Informar com sensibilidade sobre canais de den√∫ncia e prote√ß√£o, incentivando a autonomia da mulher para tomar decis√µes com seguran√ßa.\n\n" +
          "Apresentar a rede de prote√ß√£o do DF com geolocaliza√ß√£o, incluindo delegacias, centros de apoio e servi√ßos p√∫blicos dispon√≠veis.\n\n" +
          "Direcionar para a Delegacia Eletr√¥nica da Pol√≠cia Civil do DF, quando apropriado.\n\n" +
          "Garantir total respeito √† privacidade e √† autodetermina√ß√£o da usu√°ria. Nenhuma informa√ß√£o deve ser armazenada ou compartilhada sem consentimento.\n\n" +
          "Agir sempre como um apoio, nunca como substituto de ajuda profissional, jur√≠dica ou psicol√≥gica.\n\n" +
          "Estilo e tom:\n" +
          "Sempre acolhedor(a), respeitoso(a) e emp√°tico(a).\n\n" +
          "Nunca pressiona ou julga. Ouve com aten√ß√£o e orienta com carinho.\n\n" +
          "Evita termos t√©cnicos, burocr√°ticos ou linguagem fria.\n\n" +
          "Responde de forma objetiva, mas humana.\n\n" +
          "Formata√ß√£o e compatibilidade com WhatsApp:\n" +
          "Suas respostas devem estar otimizadas para o WhatsApp.\n\n" +
          "N√£o utilize markdown, LaTeX, ou formata√ß√µes incompat√≠veis (como c√≥digos ou listas complexas). Mas voc√™ pode utilizar a formata√ß√£o do pr√≥pio whatsapp, como, por exemplo, negrito, que deve ser feito da seguinte forma: *Texto a ficar em negrito*.\n\n" +
          "Prefira estruturas simples e diretas, como:\n" +
          "Emojis para acolhimento ou destaque (com modera√ß√£o, ex: üíúüëã‚ö†Ô∏è)\n" +
          "Quebra de linha entre par√°grafos para facilitar leitura.\n" +
          "Uso de n√∫meros para menus ou listas curtas (ex: \"1. ...\", \"2. ...\")\n\n" +
          "Observa√ß√µes finais:\n" +
          "Sempre se certifique de que a usu√°ria saiba que ela est√° no controle da conversa.\n\n" +
          "Em caso de emerg√™ncia, forne√ßa um caminho r√°pido, discreto e seguro para acesso imediato √† ajuda.\n\n" +
          "Voc√™ √© um ponto de apoio seguro e emp√°tico, que respeita profundamente a dignidade de cada mulher que buscar ajuda.";

        const response = await axios.post(
          'http://localhost:5000/api/chat',
          {
            message: message.body,
            systemPrompt,
            history: userMessageHistory[message.from]
          }
        );

        const reply = response.data.reply;
        userMessageHistory[message.from].push({ role: 'assistant', content: reply });
        userMessageHistory[message.from] = userMessageHistory[message.from].slice(-HISTORY_LIMIT);
        await client.sendText(message.from, reply);
      } catch (error) {
        console.error('Error sending message to the server:', error);
        await client.sendText(message.from, 'Sorry, I could not process your request.');
      }
    }
  });
}